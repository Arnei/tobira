# Defines user and group credentials used by worker processes. If group is
# omitted, a group whose name equals that of user is used.
user  nginx;

# Defines the number of worker processes.  Setting it to the number of
# available CPU cores should be a good start. The value `auto` will try to
# autodetect that.
worker_processes auto;

# Configures logging to `/var/log/...`. Log level `error` is used by default.
error_log  /var/log/nginx/error.log;

# Defines a file that will store the process ID of the main process. This needs
# to match the Systemd unit file.
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
   # Sets the maximum number of simultaneous connections that can be opened by
   # a worker process.
   worker_connections  1024;
}


http {
   # Include mime types for different file extensions.
   include       /etc/nginx/mime.types;

   # Defines the default MIME type of a response.
   default_type  application/octet-stream;

   # Sendfile copies data between one file descriptor and other from within the
   # kernel. This is more efficient than read() and write() since they require
   # transferring data to and from the user space.
   sendfile      on;

   # Todo: Write explanation
   # https://t37.net/nginx-optimization-understanding-sendfile-tcp_nodelay-and-tcp_nopush.html
   tcp_nopush on;
   tcp_nodelay on;

   # Disable access log.
   access_log off;

   # Enable on-the-fly gzip compression for larger plain text files and for
   # proxies applications.
   gzip             on;
   gzip_comp_level  2;
   gzip_min_length  1000;
   gzip_proxied     expired no-cache no-store private auth;
   gzip_types
        application/javascript
        application/json
        application/x-javascript
        application/xml
        image/svg+xml
        text/css
        text/javascript
        text/js
        text/plain
        text/xml;

   # Do not send the nginx version number in error pages and Server header
   server_tokens off;

   # Turn off old and possibly unsafe SSL protocols. TLSv1 is still necessary
   # for some older devices but I do not care.
   ssl_protocols TLSv1.2;

   # The Online Certificate Status Protocol (OCSP) is an Internet protocol used
   # for obtaining the revocation status of an X.509 digital certificate.
   ssl_stapling on;
   ssl_stapling_verify on;

   # Allow for long domain names.
   server_names_hash_bucket_size 128;

   # Always redirect to HTTPS
   server {
      listen 80;
      listen [::]:80;
      server_name _;
      location / {
         return 301 https://$host$request_uri;
      }
   }

   # Return an error page for unknown domains
   server {
      listen              443 ssl http2 default_server;
      listen         [::]:443 ssl http2 default_server;

      ssl_certificate_key /etc/nginx/ssl/tobira.opencast.org.key;
      ssl_certificate     /etc/nginx/ssl/tobira.opencast.org.crt;

      return 404;
   }

   # Serve the branch master as tobira.opencast.org
   server {
      listen              443 ssl http2;
      listen         [::]:443 ssl http2;
      server_name         tobira.opencast.org;

      ssl_certificate_key /etc/nginx/ssl/{{ inventory_hostname }}.key;
      ssl_certificate     /etc/nginx/ssl/{{ inventory_hostname }}.crt;

      location / {
         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
         proxy_set_header X-Forwarded-Proto https;
         proxy_set_header Host $http_host;
         proxy_pass http://unix:/opt/tobira/master/socket/tobira.sock;
      }

   }

   # Load modular configuration files from the /etc/nginx/conf.d directory.
   # See http://nginx.org/en/docs/ngx_core_module.html#include
   # for more information.
   include /etc/nginx/conf.d/*.conf;

}
