---

- hosts: all

  vars:
    # will usually be overwritten by --extra-vars='deployid=<id>'
    id: "{{ deployid }}"
    opencast_admin_password: '{{ lookup("env", "OPENCAST_ADMIN_PASSWORD") }}'

  tasks:
    # We always recreate the DB from the last release dump. To do that, we have
    # to stop Tobira in case it's already running.
    - name: stop tobira
      become: true
      systemd:
        name: '{{ item }}-{{ id }}'
        state: stopped
      ignore_errors: true
      with_items:
        - tobira
        - tobiraworker

    - name: drop database
      become: true
      become_user: postgres
      community.postgresql.postgresql_db:
        name: tobira-{{ id }}
        state: absent

    - name: create tobira postgres user
      become: true
      become_user: postgres
      community.postgresql.postgresql_user:
        name: tobira-{{ id }}
        password: tobira-{{ id }}

    - name: create database
      become: true
      become_user: postgres
      community.postgresql.postgresql_db:
        name: tobira-{{ id }}
        owner: tobira-{{ id }}

    - name: add pgcrypto extension
      become: true
      become_user: postgres
      community.postgresql.postgresql_ext:
        name: pgcrypto
        db: tobira-{{ id }}

    # TOBIRA


    - name: create application directory
      become: true
      file:
        path: /opt/tobira/{{ id }}
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: create socket directory
      become: true
      file:
        path: /opt/tobira/{{ id }}/socket
        state: directory
        owner: tobira
        group: tobira
        setype: httpd_sys_rw_content_t
        mode: '0755'

    - name: deploy tobira executable & scripts
      become: true
      copy:
        src: "{{ item }}"
        dest: /opt/tobira/{{ id }}/
        owner: root
        group: root
        mode: '0755'
      with_items:
        - tobira
        - login-handler.js
      notify: restart tobira

    - name: deploy demo assets
      become: true
      copy:
        src: "{{ item }}"
        dest: /opt/tobira/{{ id }}/
        owner: root
        group: root
        mode: '0644'
      with_items:
        - logo-small.svg
        - logo-large.svg
        - logo-large-dark.svg
        - favicon.svg
      notify: restart tobira

    - name: deploy configuration
      become: true
      template:
        src: config.toml
        dest: /opt/tobira/{{ id }}/
        owner: root
        group: root
        mode: '0644'
      notify: restart tobira

    - name: Download latest DB dump
      become: true
      get_url:
        url: 'https://github.com/elan-ev/tobira/raw/db-dumps/db-dump-latest.xz'
        dest: /opt/tobira/{{ id }}/db-dump.pgc.xz
        owner: root
        group: root
        mode: '0755'

    - name: Decompress DB dump
      become: true
      shell: xz -d db-dump.pgc.xz
      args:
        chdir: /opt/tobira/{{ id }}/
        creates: /opt/tobira/{{ id }}/db-dump.pgc
        removes: /opt/tobira/{{ id }}/db-dump.pgc.xz

    - name: Restore DB dump
      become: true
      become_user: postgres
      community.postgresql.postgresql_db:
        state: restore
        # The ending `pgc` is important so that `pg_restore` (and not psql) is used.
        target: /opt/tobira/{{ id }}/db-dump.pgc
        name:  tobira-{{ id }}
        target_opts: '--no-owner --role=tobira-{{ id }}'
      # Unfortunately, we have to add this here as the command fails when adding
      # comments to the 'public' schema and to two extensions. That fails
      # because the user can't access those. In the future, with a newer
      # `pg_restore` function we can specify `--no-comments` which should fix
      # this. Also note: despite those errors, the dump is correctly restored.
      # Of course this now ignores all errors, so we might miss other stuff
      # that goes wrong.
      ignore_errors: true

    # We don't need it anymore and it takes quite a bit of storage space.
    - name: Delete DB dump file
      become: true
      file:
        path: /opt/tobira/{{ id }}/db-dump.pgc
        state: absent

    - name: add hstore extension
      become: true
      become_user: postgres
      community.postgresql.postgresql_ext:
        name: hstore
        db: tobira-{{ id }}

    - name: run database migration
      become: true
      become_user: tobira
      command:
        cmd: /opt/tobira/{{ id }}/tobira db migrate
        chdir: /opt/tobira/{{ id }}/

    - name: sync with Opencast once
      become: true
      become_user: tobira
      command:
        cmd: /opt/tobira/{{ id }}/tobira sync run
        chdir: /opt/tobira/{{ id }}/

    - name: Clear search index
      become: true
      become_user: tobira
      command:
        cmd: /opt/tobira/{{ id }}/tobira search-index clear --yes-absolutely-clear-index
        chdir: /opt/tobira/{{ id }}/

    - name: Build search index once
      become: true
      become_user: tobira
      command:
        cmd: /opt/tobira/{{ id }}/tobira search-index update
        chdir: /opt/tobira/{{ id }}/

    - name: Configure known groups
      become: true
      become_user: tobira
      copy:
        src: known-groups.json
        dest: /opt/tobira/{{ id }}/
        owner: root
        group: root
        mode: '0644'

    - name: Configure known groups
      become: true
      become_user: tobira
      command:
        cmd: /opt/tobira/{{ id }}/tobira known-groups upsert known-groups.json
        chdir: /opt/tobira/{{ id }}/

    - name: install tobira service files
      become: true
      template:
        src: '{{ item }}.service'
        dest: /etc/systemd/system/{{ item }}-{{ id }}.service
        mode: '0644'
        owner: root
        group: root
      with_items:
        - tobira
        - tobiraworker
        - tobiraauth
      notify: restart tobira

    - name: start and enable tobira
      become: true
      systemd:
        daemon_reload: true
        name: '{{ item }}-{{ id }}'
        state: started
        enabled: true
      with_items:
        - tobira
        - tobiraworker
        - tobiraauth

    # NGINX

    - name: deploy nginx host configuration
      become: true
      template:
        src: nginx-host.conf
        dest: /etc/nginx/conf.d/tobira-{{ id }}.conf
        mode: '0644'
        owner: root
        group: root
      notify: reload nginx


  handlers:
    - name: restart tobira
      become: true
      service:
        name: '{{ item }}-{{ id }}'
        state: restarted
      with_items:
        - tobira
        - tobiraworker
        - tobiraauth

    - name: reload nginx
      become: true
      service:
        name: nginx
        state: reloaded
