# Auto-generated file: DO NOT EDIT DIRECTLY!
#
# This file is generated by `backend/api/src/bin/export-schema.rs`. The
# API itself is defined in `backend/api`.

type Event {
  id: ID!
  title: String!
  description: String
  "Duration in ms."
  duration: Float
  thumbnail: String
  tracks: [Track!]!
  created: DateTimeUtc!
  updated: DateTimeUtc!
  creator: String
  series: Series
}

type Mutation {
  """
    Sets the order of all children of a specific realm.

    `childIndices` must contain at least one element, i.e. do not call this
    for realms without children.
  """
  setChildOrder(parent: ID!, childOrder: RealmOrder!, childIndices: [ChildIndex!] = null): Realm!
  "Updates a realm's data."
  updateRealm(id: ID!, set: UpdateRealm!): Realm!
}

enum VideoListOrder {
  NEW_TO_OLD
  OLD_TO_NEW
}

"DateTime"
scalar DateTimeUtc

"A block just showing some text."
type TextBlock implements Block {
  content: String!
}

type Query {
  apiVersion: String!
  "Returns the root realm."
  rootRealm: Realm!
  """
    Returns the realm with the specific ID or `None` if the ID does not
    refer to a realm.
  """
  realmById(id: ID!): Realm
  """
    Returns the realm with the given path or `None` if the path does not
    refer to a realm.

    Paths with and without trailing slash are accepted and treated equally.
    The paths `""` and `"/"` refer to the root realm. All other paths have
    to start with `"/"`.
  """
  realmByPath(path: String!): Realm
  "Returns an event by its ID."
  event(id: ID!): Event
}

enum RealmOrder {
  BY_INDEX
  ALPHABETIC_ASC
  ALPHABETIC_DESC
}

input ChildIndex {
  id: ID!
  index: Int!
}

"A block just showing the list of videos in an Opencast series"
type SeriesBlock implements Block {
  series: Series!
  layout: VideoListLayout!
  order: VideoListOrder!
}

type Series {
  id: ID!
  title: String!
  description: String
  events: [Event!]!
}

"A `Block`: a UI element that belongs to a realm."
interface Block {
  id: ID!
  index: Int!
  title: String
}

input UpdateRealm {
  parent: ID
  name: String
  pathSegment: String
}

type Track {
  uri: String!
  flavor: String!
  mimetype: String
  resolution: [Int!]
}

type Realm {
  id: ID!
  name: String!
  isRoot: Boolean!
  index: Int!
  """
    Specifies how the children of this realm should be ordered (e.g. in the
    navigation list). That's the responsibility of the frontend.
  """
  childOrder: RealmOrder!
  """
    Returns the full path of this realm. `""` for the root realm. For
    non-root realms, the path always starts with `/` and never has a
    trailing `/`.
  """
  path: String!
  "Returns the immediate parent of this realm."
  parent: Realm
  """
    Returns all ancestors between the root realm to this realm
    (excluding both, the root realm and this realm).
  """
  ancestors: [Realm!]!
  """
    Returns all immediate children of this realm. The children are always
    ordered by the internal index. If `childOrder` returns an ordering
    different from `BY_INDEX`, the frontend is supposed to sort the
    children.
  """
  children: [Realm!]!
  "Returns the (content) blocks of this realm."
  blocks: [Block!]!
  """
    Returns the number of realms that are descendants of this one
    (excluding this one). Returns a number â‰¥ 0.
  """
  numberOfDescendants: Int!
}

enum VideoListLayout {
  HORIZONTAL
  VERTICAL
  GRID
}

schema {
  query: Query
  mutation: Mutation
}
