# Auto-generated file: DO NOT EDIT DIRECTLY!
#
# This file is generated by `backend/src/cmd/export_api_schema.rs`. The
# API itself is defined in `backend/src/api`.

type Event implements Node {
  id: ID!
  opencastId: String!
  title: String!
  description: String
  "Duration in ms."
  duration: Int!
  thumbnail: String
  tracks: [Track!]!
  created: DateTimeUtc!
  updated: DateTimeUtc!
  creators: [String!]!
  "Whether the current user has write access to this event."
  canWrite: Boolean!
  series: Series
}

type EventPageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
  endCursor: Cursor
  "The index of the first returned event."
  startIndex: Int
  "The index of the last returned event."
  endIndex: Int
}

type Mutation {
  "Adds a new realm."
  addRealm(realm: NewRealm!): Realm!
  """
    Sets the order of all children of a specific realm.

    `childIndices` must contain at least one element, i.e. do not call this
    for realms without children.
  """
  setChildOrder(parent: ID!, childOrder: RealmOrder!, childIndices: [ChildIndex!] = null): Realm!
  "Updates a realm's data."
  updateRealm(id: ID!, set: UpdateRealm!): Realm!
  "Remove a realm from the tree."
  removeRealm(id: ID!): RemovedRealm!
  """
    Adds a title block to a realm.

    The new block will be inserted at the given index,
    i.e. it will be at that position after the insert.
    Or, if you prefer to think about it this way:
    It will be inserted before the block that currently sits
    at that index.
  """
  addTitleBlock(realm: ID!, index: Int!, block: NewTitleBlock!): Realm!
  """
    Adds a text block to a realm.

    See `addTitleBlock` for more details.
  """
  addTextBlock(realm: ID!, index: Int!, block: NewTextBlock!): Realm!
  """
    Adds a series block to a realm.

    See `addTitleBlock` for more details.
  """
  addSeriesBlock(realm: ID!, index: Int!, block: NewSeriesBlock!): Realm!
  """
    Adds a video block to a realm.

    See `addTitleBlock` for more details.
  """
  addVideoBlock(realm: ID!, index: Int!, block: NewVideoBlock!): Realm!
  "Swap two blocks."
  swapBlocksByIndex(realm: ID!, indexA: Int!, indexB: Int!): Realm!
  "Update a title block's data."
  updateTitleBlock(id: ID!, set: UpdateTitleBlock!): Block!
  "Update a text block's data."
  updateTextBlock(id: ID!, set: UpdateTextBlock!): Block!
  "Update a series block's data."
  updateSeriesBlock(id: ID!, set: UpdateSeriesBlock!): Block!
  "Update a video block's data."
  updateVideoBlock(id: ID!, set: UpdateVideoBlock!): Block!
  "Remove a block from a realm."
  removeBlock(id: ID!): RemovedBlock!
}

input NewTextBlock {
  content: String!
}

enum VideoListOrder {
  NEW_TO_OLD
  OLD_TO_NEW
}

"DateTime"
scalar DateTimeUtc

"A block just showing some text."
type TextBlock implements Block {
  content: String!
  id: ID!
  index: Int!
}

"An opaque cursor used for pagination"
scalar Cursor

type RemovedBlock {
  id: ID!
  realm: Realm!
}

type Query {
  "Returns the root realm."
  rootRealm: Realm!
  """
    Returns the realm with the specific ID or `None` if the ID does not
    refer to a realm.
  """
  realmById(id: ID!): Realm
  """
    Returns the realm with the given path or `None` if the path does not
    refer to a realm.

    Paths with and without trailing slash are accepted and treated equally.
    The paths `""` and `"/"` refer to the root realm. All other paths have
    to start with `"/"`.
  """
  realmByPath(path: String!): Realm
  "Returns an event by its ID."
  event(id: ID!): Event
  "Returns a list of all events the current user has read access to"
  events: [Event!]!
  "Returns a list of all series"
  series: [Series!]!
  "Returns the current user."
  currentUser: User
  "Returns a new JWT that can be used to authenticate against Opencast for uploading videos."
  uploadJwt: String!
  "Retrieve a node by globally unique ID. Mostly useful for relay."
  node(id: ID!): Node
  "Returns `null` if the query is too short."
  search(query: String!): SearchResults
}

enum RealmOrder {
  BY_INDEX
  ALPHABETIC_ASC
  ALPHABETIC_DESC
}

type SearchEvent implements Node {
  id: ID!
  title: String!
  seriesTitle: String
  description: String
  creators: [String!]!
  thumbnail: String
  duration: Int!
}

input ChildIndex {
  id: ID!
  index: Int!
}

type EventConnection {
  pageInfo: EventPageInfo!
  items: [Event!]!
  totalCount: Int!
}

type RemovedRealm {
  parent: Realm!
}

"A block just showing the list of videos in an Opencast series"
type SeriesBlock implements Block {
  series: Series
  showTitle: Boolean!
  order: VideoListOrder!
  id: ID!
  index: Int!
}

input NewVideoBlock {
  event: ID!
  showTitle: Boolean!
}

input UpdateSeriesBlock {
  series: ID
  showTitle: Boolean
  order: VideoListOrder
}

type Series implements Node {
  id: ID!
  title: String!
  description: String
  events(order: EventSortOrder = {column: "CREATED", direction: "DESCENDING"}): [Event!]!
}

type SearchRealm implements Node {
  id: ID!
  name: String!
  path: String!
  ancestorNames: [String!]!
}

"Defines the sort order for events."
input EventSortOrder {
  column: EventSortColumn!
  direction: SortDirection!
}

"A `Block`: a UI element that belongs to a realm."
interface Block {
  id: ID!
  index: Int!
}

input UpdateRealm {
  parent: ID
  name: String
  pathSegment: String
}

input UpdateTitleBlock {
  content: String
}

input UpdateVideoBlock {
  event: ID
  showTitle: Boolean
}

enum EventSortColumn {
  TITLE
  DURATION
  CREATED
  UPDATED
}

"A block for presenting a single Opencast event"
type VideoBlock implements Block {
  event: Event
  showTitle: Boolean!
  id: ID!
  index: Int!
}

input NewSeriesBlock {
  series: ID!
  showTitle: Boolean!
  order: VideoListOrder!
}

"A block just showing some title."
type TitleBlock implements Block {
  content: String!
  id: ID!
  index: Int!
}

"A node with a globally unique ID. Mostly useful for relay."
interface Node {
  id: ID!
}

type User {
  "The username, a unique string identifying the user."
  username: String!
  "The name of the user intended to be read by humans."
  displayName: String!
  "`True` if the user has the permission to upload videos."
  canUpload: Boolean!
  "`True` if the user has the permission to use Opencast Studio."
  canUseStudio: Boolean!
  "`True` if the user has the permission to use Opencast Studio."
  canUseEditor: Boolean!
  """
    Returns all events that somehow "belong" to the user, i.e. that appear
    on the "my videos" page.

    Exactly one of `first` and `last` must be set!
  """
  myVideos(order: EventSortOrder = {column: "CREATED", direction: "DESCENDING"}, first: Int, after: Cursor, last: Int, before: Cursor): EventConnection!
}

type Track {
  uri: String!
  flavor: String!
  mimetype: String
  resolution: [Int!]
}

type SearchResults {
  items: [Node!]!
}

enum SortDirection {
  ASCENDING
  DESCENDING
}

input NewRealm {
  parent: ID!
  name: String!
  pathSegment: String!
}

type Realm implements Node {
  id: ID!
  name: String!
  isRoot: Boolean!
  index: Int!
  """
    Specifies how the children of this realm should be ordered (e.g. in the
    navigation list). That's the responsibility of the frontend.
  """
  childOrder: RealmOrder!
  """
    Returns the full path of this realm. `"/"` for the root realm. For
    non-root realms, the path always starts with `/` and never has a
    trailing `/`.
  """
  path: String!
  "Returns the immediate parent of this realm."
  parent: Realm
  """
    Returns all ancestors between the root realm to this realm
    (excluding both, the root realm and this realm). It starts with a
    direct child of the root and ends with the parent of `self`.
  """
  ancestors: [Realm!]!
  """
    Returns all immediate children of this realm. The children are always
    ordered by the internal index. If `childOrder` returns an ordering
    different from `BY_INDEX`, the frontend is supposed to sort the
    children.
  """
  children: [Realm!]!
  "Returns the (content) blocks of this realm."
  blocks: [Block!]!
  """
    Returns the number of realms that are descendants of this one
    (excluding this one). Returns a number â‰¥ 0.
  """
  numberOfDescendants: Int!
  canCurrentUserEdit: Boolean!
}

input UpdateTextBlock {
  content: String
}

input NewTitleBlock {
  content: String!
}

schema {
  query: Query
  mutation: Mutation
}
