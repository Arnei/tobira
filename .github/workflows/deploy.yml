name: Deploy

on:
  workflow_run:
    workflows: ["Build & test"]
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-20.04
    if: >
      ${{ github.event.workflow_run.conclusion == 'success' && (
        github.actor == 'LukasKalbertodt' ||
        github.actor == 'JulianKniephoff' ||
        github.actor == 'lkiesow'
      ) }}
    steps:
    - uses: actions/checkout@v2

    # Unfortunately we cannot use `actions/download-artifact` here since that
    # only allows to download artifacts from the same run.
    - name: Download artifacts from build workflow
      uses: actions/github-script@v3.1.0
      with:
        script: |
          const artifacts = await github.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{github.event.workflow_run.id }},
          });
          const deployFiles = artifacts.data.artifacts
              .filter(a => a.name == "test-deployment-files")[0];
          const download = await github.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: deployFiles.id,
              archive_format: 'zip',
          });

          const fs = require('fs');
          fs.writeFileSync('${{github.workspace}}/artifacts.zip', Buffer.from(download.data));

          // The artifact is not needed anymore
          github.actions.deleteArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: deployFiles.id,
          })

    # We could run `unzip -o` to overwrite all files, but that could easily lead
    # to security problems as the workflow creating the zip file can add
    # arbitrary files. Right now it does not matter as this workflow explicitly
    # only runs for trusted users, but being more careful here is better. So we
    # explicitly remove the file we expect to get overwriten.
    - name: extract artifacts
      run: |
        rm scripts/fixtures.sql || true
        rm backend/logo-large.svg || true
        rm backend/logo-small.svg || true
        unzip artifacts.zip

    - name: Prepare files for deployment
      run: |
        cp -v backend/target/debug/tobira .deployment/files/
        cp -v scripts/fixtures.sql .deployment/files/
        cp -v backend/logo-large.svg .deployment/files/
        cp -v backend/logo-small.svg .deployment/files/

    - name: prepare deploy key
      env:
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
      run: |
        install -dm 700 ~/.ssh/
        echo "${DEPLOY_KEY}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan tobira.opencast.org >> ~/.ssh/known_hosts

    - name: install ansible postgres extensions
      run: ansible-galaxy collection install community.postgresql

    - name: deploy tobira branch
      working-directory: .deployment
      run: >
        ansible-playbook
        --private-key=~/.ssh/id_ed25519
        --extra-vars="deployid='$(cat ../deploy-id)'"
        -u github
        deploy.yml
