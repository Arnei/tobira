name: Build, test and deploy

on: [pull_request, push]

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: --deny warnings

jobs:
  main:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2

    # Backend cache: this cache stores cargo caches and compiled dependencies to
    # speed up compiling the backend. We use a key consisting of the lock file,
    # the compiler version and the global compiler flags. If either of the
    # latter two change, everything is recompiled anyway. The lockfile is used,
    # too, to avoid caching dependencies that have been removed already. Also
    # compare: https://github.com/actions/cache/blob/main/examples.md#rust---cargo
    - name: Prepare backend cache key
      run: |
        cp backend/Cargo.lock cache-fingerprint
        echo "$RUSTFLAGS $(rustc -V)" >> cache-fingerprint
    - name: Restore backend cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          backend/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('cache-fingerprint') }}

    # Frontend cache: only the NPM folder is cached, not the node_modules, as
    # recommended here: https://github.com/actions/cache/blob/main/examples.md#node---npm
    - name: Restore NPM cache
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}

    # The actual building and testing!
    - name: Installing frontend dependencies (npm ci)
      working-directory: frontend
      run: npm ci
    - name: Generate GraphQL query types
      working-directory: frontend
      run: npx relay-compiler
    - name: Typecheck frontend
      working-directory: frontend
      run: npm run typecheck
    - name: Lint frontend
      working-directory: frontend
      run: npx eslint --max-warnings 0 .
    - name: Build frontend
      working-directory: frontend
      run: npx webpack --mode=development --display-error-details

    - name: Build backend
      working-directory: backend
      run: cargo build
    - name: Test backend
      working-directory: backend
      run: cargo test
    - name: Generate documenation for backend
      working-directory: backend
      run: cargo doc --no-deps
    - name: Make sure `schema.graphql` is up to date
      working-directory: backend
      run: cargo run --bin export-schema | diff -u --color=always - ../frontend/src/schema.graphql

    # Deployment
    - name: Build server binary for CI
      working-directory: backend/server
      run: cargo build --features=embed-in-debug
    - name: Prepare binary and demo data for deployment
      run: |
        cp -v backend/target/debug/tobira .deployment/files/
        cp -v scripts/fixtures.sql .deployment/files/
        cp -v backend/logo-large.svg .deployment/files/
        cp -v backend/logo-small.svg .deployment/files/

    - name: prepare deploy key
      env:
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
      run: |
        install -dm 700 ~/.ssh/
        echo "${DEPLOY_KEY}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan tobira.opencast.org >> ~/.ssh/known_hosts
      if: ${{ github.event_name == 'push' }}

    - name: install ansible postgres extensions
      run: ansible-galaxy collection install community.general
      if: ${{ github.event_name == 'push' && github.repository_owner == 'elan-ev' }}

    - name: deploy tobira branch
      working-directory: .deployment
      run: >
        ansible-playbook
        --private-key=~/.ssh/id_ed25519
        --extra-vars="branch='${GITHUB_REF#refs/heads/}'"
        -u github
        deploy.yml
      if: ${{ github.event_name == 'push' && github.repository_owner == 'elan-ev' }}
