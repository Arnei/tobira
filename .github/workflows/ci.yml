name: Build & test

on:
  pull_request:
  push:
    branches:
      - "*"
    tags-ignore:
      - "*"


env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: --deny warnings

jobs:
  main:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2

    - name: Restore backend cache
      uses: Swatinem/rust-cache@v1.3.0
      with:
        working-directory: backend

    # Frontend cache: only the NPM folder is cached, not the node_modules, as
    # recommended here: https://github.com/actions/cache/blob/main/examples.md#node---npm
    - name: Restore NPM cache
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}

    # Figure out build mode
    - name: Determine build mode
      id: build_mode
      run: |
        if [[ "$GITHUB_REPOSITORY" == "elan-ev/tobira" ]] && [ "$GITHUB_REF" == "refs/heads/master" ]; then
          echo "::set-output name=cargo::--release"
          echo "::set-output name=targetdir::target/release"
          echo "::set-output name=webpack::production"
        else
          echo "::set-output name=cargo::--features=embed-in-debug"
          echo "::set-output name=targetdir::target/debug"
          echo "::set-output name=webpack::development"
        fi

    # The actual building and testing!
    - name: Installing frontend dependencies (npm ci)
      working-directory: frontend
      run: npm ci
    - name: Generate GraphQL query types
      working-directory: frontend
      run: npx relay-compiler
    - name: Typecheck frontend
      working-directory: frontend
      run: npx tsc
    - name: Lint frontend
      working-directory: frontend
      run: npx eslint --max-warnings 0 .
    - name: Build frontend
      working-directory: frontend
      run: npx webpack --mode=${{ steps.build_mode.outputs.webpack }}

    - name: Build backend
      working-directory: backend
      run: cargo build
    - name: Test backend
      working-directory: backend
      run: cargo test
    - name: Make sure `schema.graphql` is up to date
      working-directory: backend
      run: cargo run -- export-api-schema | diff -u --color=always - ../frontend/src/schema.graphql
    - name: Make sure `docs/docs/setup/config.toml` is up to date
      working-directory: backend
      run: cargo run -- write-config | diff -u --color=always - ../docs/docs/setup/config.toml

    # Prepare binary for deployment
    - name: Build server binary for test deployment
      working-directory: backend
      run: cargo build ${{ steps.build_mode.outputs.cargo }}
    - name: Move deploy binary
      run: mv backend/${{ steps.build_mode.outputs.targetdir }}/tobira tobira
    - name: Compress server binary
      run: objcopy --compress-debug-sections tobira

    # Prepare the ID (used in the subdomain) for deployment. This has to be done
    # here because in the `deploy` workflow, we don't have access to the correct
    # `GITHUB_REF` anymore.
    - name: Write deploy ID to file
      run: ./.deployment/deploy-id.sh "$GITHUB_REF" > deploy-id

    # Archive files to be used in the `deploy` workflow
    - name: Archive deployment files as artifact
      uses: actions/upload-artifact@v2
      with:
        name: test-deployment-files
        path: |
          tobira
          util/dev-config/logo-large.svg
          util/dev-config/logo-small.svg
          util/dev-config/favicon.svg
          deploy-id
          .deployment/templates/config.toml
          util/containers/login-handler.py
