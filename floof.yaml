default:
  - concurrently:
    - http:
        proxy: 127.0.0.1:3080
    - run-task: frontend
    - run-task: backend

# Proxies to auth proxy so that one can login. Requires the scripts below.
with-login:
  - concurrently:
    - http:
        proxy: 127.0.0.1:3090
    - run-task: frontend
    - run-task: backend

# Starts all services from `scripts`
start-scripts:
  - set-workdir: scripts
  - concurrently:
    - docker-compose -f auth-proxy/docker-compose.yml up -d
    - docker-compose -f meilisearch/docker-compose.yml up -d
    - docker-compose -f dev-db/docker-compose.yml up -d
    - docker-compose -f login-handler/docker-compose.yml up -d
    - docker-compose -f opencast-cors/docker-compose.yml up -d

# Stop all those servives again
stop-scripts:
  - set-workdir: scripts
  - concurrently:
    - docker-compose -f auth-proxy/docker-compose.yml stop
    - docker-compose -f meilisearch/docker-compose.yml stop
    - docker-compose -f dev-db/docker-compose.yml stop
    - docker-compose -f login-handler/docker-compose.yml stop
    - docker-compose -f opencast-cors/docker-compose.yml stop


# Runs all services from `scripts`
run-scripts:
  - set-workdir: scripts
  - concurrently:
    - docker-compose -f auth-proxy/docker-compose.yml up
    - docker-compose -f meilisearch/docker-compose.yml up
    - docker-compose -f dev-db/docker-compose.yml up
    - docker-compose -f login-handler/docker-compose.yml up
    - docker-compose -f opencast-cors/docker-compose.yml up


# --- Private/helper tasks ---------------------------------------------------

backend:
  - set-workdir: backend
  - watch:
      paths:
        - Cargo.lock
        - config.toml
        - src
      run:
        - cargo build
        - cargo run -- export-api-schema ../frontend/src/schema.graphql
        - cargo run -- write-config ../docs/config.toml
        - reload:
        - cargo run -- serve

frontend:
  - set-workdir: frontend
  - npm i --no-save
  - mkdir -p build
  - concurrently:
    - npx webpack watch --mode=development --no-stats
    - npx relay-compiler --output quiet-with-errors --watch
    - watch:
        paths: ["build"]
        debounce: 50
        run:
          - reload:

# Creating a production build
build:
  - command:
      run: npm ci
      workdir: frontend
  - command:
      run: npx relay-compiler
      workdir: frontend
  - command:
      run: npx webpack --progress --mode=production
      workdir: frontend
  - command:
      run: cargo build --release
      workdir: backend

  # TODO: use OS independent operations
  - mkdir -p deploy
  - cp backend/target/release/tobira deploy
  - objcopy --compress-debug-sections deploy/tobira
  - cp backend/config.toml deploy
  - cp backend/logo-large.svg deploy
  - cp backend/logo-small.svg deploy

clean:
  - command:
      run: cargo clean
      workdir: backend
  # TODO: use OS independent operations
  - rm -rf frontend/node_modules
  - rm -rf frontend/build
  - rm -f frontend/tsconfig.tsbuildinfo
  - command:
      run: npm run clean:relay
      workdir: frontend
